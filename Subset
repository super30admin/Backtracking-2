//TimeComplexity 2^n
//SpaceComplexity 2^n


class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> subsets(int[] nums) {
        result = new ArrayList<>();
        
        helper(nums,0,new ArrayList<>());
        return result;
    }

    private void helper(int[] nums,int pivot,List<Integer> path){

        //base
   
        result.add(new ArrayList<>(path));
     
        
        //logic

        for(int i = pivot; i< nums.length; i++){

        //choose
        path.add(nums[i]);
        helper(nums,i+1,(path));
        path.remove(path.size()-1);

        }
       
    }
}
