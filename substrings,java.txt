/*
Time Complexity:O(n*2^n)
Space Complexity:O(n)
*/
import java.util.*;
class Solution {
    void traverse(int[] nums,int n,List<Integer> path, List<List<Integer>> res){
        
        if(n<0){
            return;
        }
        //branching 
        //not choosing case
        traverse(nums,n-1,path,res);
        //choosing case
        path.add(nums[n]);
        res.add(new ArrayList<>(path));
        traverse(nums,n-1,path,res);
        //backtracking
        path.remove(path.size()-1);
    }
    public List<List<Integer>> subsets(int[] nums) {
     List<List<Integer>> res=new ArrayList<List<Integer>>();
    List<Integer> a=new ArrayList<Integer>();
        res.add(new ArrayList<Integer>());
    traverse(nums,nums.length-1,a,res);
        return res;
    }
}