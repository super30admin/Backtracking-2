// Time Complexity : O(n*2^n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Approach
//1) By backtracking, add the elements in the list and remove that element to add another one
//2) proceed furthur by adding all possible subsets from the given array
class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> subsets(int[] nums) {
        result = new ArrayList<>();
        if(nums== null || nums.length == 0)return result;
        backtrack(nums,new ArrayList<>(), 0);
        return result;
    }
    private void backtrack(int[] nums, List<Integer> temp,int index){
        //base
        result.add(new ArrayList<>(temp));
        for(int i=index;i<nums.length;i++){
            //action
            temp.add(nums[i]);
            //recurse
            backtrack(nums,temp,i+1);
            //backtrack
            temp.remove(temp.size()-1);
        }
    }
}