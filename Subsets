class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> subsets(int[] nums) {
        result= new ArrayList<List<Integer>>();
      if(nums==null || nums.length==0){
        return  result;
      }  
        helper(nums,0,new ArrayList<>());
        return result;
    }
    public void helper(int[] nums, int i, List<Integer> path){
        if(i==nums.length)
        {
            result.add(new ArrayList<>(path));
            return;
        }
        helper(nums,i+1,path);
        path.add(nums[i]);
        helper(nums,i+1,path);
        path.remove(path.size()-1);
    }
}

//Time Complexity: exponetial
//Space complexity: O(n)
//Backtracking new same list, remove element after choosing it, keep updating the same list as we recurse throught the tree
