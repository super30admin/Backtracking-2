Time complexity: O(n*2^n)
Space complexity: O(n*2^n)
Did this code got submitted successfully on leetcode: Yes

class Solution {
    
    
    public List<List<Integer>> subsets(int[] nums) {
        
        List<List<Integer>> output = new ArrayList<>();
        Arrays.sort(nums);
        
        backtrack(nums, 0, new ArrayList<>(),output);
        
        return output;
    }
    
    private void backtrack(int[] nums, int start, List<Integer> path,List<List<Integer>> output){
        
        //base case
            output.add(new ArrayList<>(path));
        
        //logic
        for(int i=start; i<nums.length; i++){
            path.add(nums[i]);
            
            backtrack(nums, i+1, path, output);
            
            path.remove(path.size()-1);
        }
    }
}
