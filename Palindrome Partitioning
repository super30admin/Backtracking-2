class Solution {
    List<List<String>>  result = new ArrayList<>();
    
    public List<List<String>> partition(String s) 
    {
        if(s==null || s.length()==0)
        {
            return result;
        }
        backtracking(s,0,new ArrayList<>());
        return result;
        
    }     
        
        private void backtracking(String s,int index, List<String> temp){
            if(index==s.length())
            {
                result.add(new ArrayList<>(temp));
                return ;
            } 
                for(int i=0;i<s.length();i++)
                {
                   if (isPalindrome(s,index,i))
                   {
                       temp.add(s.substring(index,i+1));
                       backtracking(s,i+1,temp);
                       temp.remove(temp.size()-1);
                   }
                    
                }
            
        }
        
        
        private boolean isPalindrome(String s, int l, int r)
        { 
            //Edge case 
            if(l==r)
            {
                return true;
            }
            while(l<r)
            {
            if(s.charAt(l) != s.charAt(r))
            {
                return false;
            }
            l++;
            r--;  
        }
      return true;  
    }

}
