// Time Complexity :
// Space Complexity :
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Approach
//1) By backtracking, add the elements in the list and remove that element to add another one
//2) proceed furthur by adding all possible palindrome strings from the given string
class Solution {
    List<List<String>> result;
    public List<List<String>> partition(String s) {
        result = new ArrayList<>();
        backtrack(s,new ArrayList<>(),0);
        return result;
    }
    
    private void backtrack(String s, List<String> temp, int index){
        //basecase
        if(index == s.length()){
            result.add(new ArrayList<>(temp));
            return;
        }
        for(int i=index;i<s.length();i++){
            if(isPalindrome(s,index,i)){
                //action
                temp.add(s.substring(index,i+1));
                //recurse
                backtrack(s,temp,i+1);
                //backtrack
                temp.remove(temp.size()-1);
            }   
        }
    }
    private boolean isPalindrome(String s, int l, int r){
        if(l == r)return true;
        while(l<r){
            if(s.charAt(l) != s.charAt(r))return false;
            l++;r--;
        }
        return true;
    }
}