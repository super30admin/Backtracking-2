//tc: O(2^n)
//sc: O(n)
//passed on leetcode: yes
class Solution {
    List<List<String>> result;
    public List<List<String>> partition(String s) {
        result = new ArrayList<>();
        if (s==null || s.length() ==0) return result;
        helper(s,0,new ArrayList<>());
        return result;
    }
    
    private void helper(String s, int index, List<String> path) {
        //base
        if (index ==s.length()) {//string is traversed
            result.add(new ArrayList(path));
            return;
        }
        //logic
        for (int i = index; i< s.length(); i++) {
            String subSt = s.substring(index,i+1);
            if (isPalindrome(subSt)){
                //action
                path.add(subSt);
                //recurse
                helper(s,i+1,path); //if the substring is a palindrome, recurse again from that index on the string
                //backtrack
                path.remove(path.size()-1);
            }
        }
    }
    
    private boolean isPalindrome(String s) {
        int start = 0;
        int end = s.length()-1;
        while(start<end){
            if (s.charAt(start)!=s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
