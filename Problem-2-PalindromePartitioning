//TC - O(2^n) + O(n) -- O(n) is for checking if string is palindrome or not and substring also
//SC - O(n)
class Solution {
    List<List<String>> result;
    public List<List<String>> partition(String s) {
        result = new ArrayList<>();
        if(s == null || s.length() == 0) return result;
        
        helper(s, 0, new ArrayList<>());
        return result;
    }
    private void helper(String s, int index , List<String> path)
    {
        if(index == s.length())
        {
            result.add(new ArrayList<>(path));
            return;
        }
   
        for(int i = index ; i< s.length() ; i++)
        {
            String sb = s.substring(index, i+1);
            if(isPalindrome(sb))
            {
                path.add(sb);
                helper(s, i+1, path);
                path.remove(path.size() - 1);
            }
            
        }
    }
    private boolean isPalindrome(String s)
    {
        int start = 0;
        int end = s.length() - 1;
        while(start < end)
        {
            if(s.charAt(start) != s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}
