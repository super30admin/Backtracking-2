Time complexity: O(n^2 * 2^n)
Space complexity: O(n)
Did this code successfully submitted on leetcode: Yes

class Solution {
    public List<List<String>> partition(String s) {
       List<List<String>> output = new ArrayList<>();
        
       backtrack(s, 0, new ArrayList<>(), output);
        
        return output;
    }
    
    private void backtrack(String s, int start, List<String> path, List<List<String>> output){
        
        if(start == s.length())
            output.add(new ArrayList<>(path));
        else{
            for(int i = start; i < s.length(); i++){
                
                if(isPalindrome(s, start, i)){
                    
                    path.add(s.substring(start, i + 1));
                    
                    backtrack(s,i + 1,path,output);
                    
                    path.remove(path.size() - 1);
                 
                }
            }
        }
    }
    
    public boolean isPalindrome(String s, int low, int high){
       
        while(low < high)
          if(s.charAt(low++) != s.charAt(high--)) 
              return false;
       
        return true;
    } 
}
