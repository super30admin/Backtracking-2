/78. Subsets

//using normal for loop
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> result=new ArrayList<>();
    result.add(new ArrayList<>());
    for(int i=0;i<nums.length;i++){
        int l=result.size();
        for(int j=0;j<l;j++){
            List<Integer>li=new ArrayList<>(result.get(j));
            li.add(nums[i]);
            result.add(li);

        }
    }
return result;
    }
}




//for loop based recursion
// TC o(2^n) SC o(n)
// class Solution {
//     List<List<Integer>> result=new ArrayList<>();
//     public List<List<Integer>> subsets(int[] nums) {
//         helper(nums,0,new ArrayList<>());
//         return result;
//     }
//     private void helper(int[] nums,int pivot,List<Integer>path){
//         //base
//         //logic
//         result.add(new ArrayList<>(path));
//         for(int i=pivot;i<nums.length;i++){
//             //actio
//             path.add(nums[i]);
//             //recurse
//             helper(nums,i+1,path);
//             //backtrack
//             path.remove(path.size()-1);

//         }

//     }
// }


//backtracking solution
// class Solution {
//     List<List<Integer>> result=new ArrayList<>();
//     public List<List<Integer>> subsets(int[] nums) {
//         helper(nums,0,new ArrayList<>());
//         return result;
//     }
//     private void helper(int[] nums,int idx,List<Integer>path){
//         //base
//         if(idx==nums.length){
//             result.add(new ArrayList<>(path));
//             return;
//         }
//         //logic
//         //not choose
//         helper(nums,idx+1,path);
//         //choose
//         path.add(nums[idx]);
//         helper(nums,idx+1,path);
//     //backtrack
//         path.remove(path.size()-1);

//     }
// }

// 1,0 (choose, not choose) solution
// class Solution {
//     List<List<Integer>> result=new ArrayList<>();
//     public List<List<Integer>> subsets(int[] nums) {
//         helper(nums,0,new ArrayList<>());
//         return result;
//     }
//     private void helper(int[] nums,int idx,List<Integer>path){
//         //base
//         if(idx==nums.length){
//             result.add(path);
//             return;
//         }
//         //logic
//         //not choose
//         helper(nums,idx+1,new ArrayList<>(path));
//         //choose
//         path.add(nums[idx]);
//         helper(nums,idx+1,new ArrayList<>(path));


//     }
// }