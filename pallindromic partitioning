//Time complexity: Total number of nodes in the recusrion tree
// 2^N possible combinations (total number of nodes in tree) and time to check the pallindromic nature : O(N) => total TC: N*2^N
// space complexity : O(N)
class Solution {
    List<List<String>> output;
    public List<List<String>> partition(String s) {
        output = new ArrayList<>();
        helper(0, s, new ArrayList<>());
        return output;
    }
    
    public void helper(int start, String s, List<String> temp){
        
        if(start == s.length()){
            output.add(new ArrayList<>(temp));
            return;
        }
        
        //make a choice
        for(int i = start; i < s.length(); i++){
            
            String substr = s.substring(start, i+1);
            
            if(isPalindrome(s, start, i)){
                temp.add(substr);
                helper(i+1, s, temp);
                temp.remove(temp.size()-1);
            }
        }
    }
    
    public boolean isPalindrome(String s, int start, int end){
        
        while(start < end){
            if(s.charAt(start) != s.charAt(end)) return false;
            
            start++;
            end--;
           
        }
         return true;
    }
    
}
