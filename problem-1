//Time: n*2^n
//space: O(n) in worst case in recusrive stack where n is height of the tree
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
       List<List<Integer>> result = new ArrayList<List<Integer>>(); 
        if(nums==null || nums.length==0) return result;
        
        dfs(result, new ArrayList<>(), nums, 0);
        result.add(new ArrayList<>());
            return result;
    }
    
    void dfs(List<List<Integer>> result, List<Integer> list,int[] nums, int start)
    {
        
        for(int i=start;i<nums.length;i++)
        {
            list.add(nums[i]);
            result.add(new ArrayList<>(list));
            
            dfs(result,list,nums,i+1);
            list.remove(list.size()-1);
        }
    }
}
