/*
aba
start with substring(add one index every call) and recurse backtracing
if backtracking is done (not palindrome) then remove the last element from the path
Time - O(N^N)
space - O(N)
*/

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> output = new ArrayList<>();
        List<String> path = new ArrayList<>();
        
        backtracking(s, 0, output, path);
        return output;
    }
    
    private void backtracking(String s, int index, List<List<String>> output, List<String> path){
        
        //base case
        if(index >= s.length()){
            output.add(new ArrayList<>(path));
            return;
        }
        
        //recursive case
        for(int i = index; i < s.length(); i++){
            String temp = s.substring(index, i + 1);
            if(isPalindrome(temp)){
                path.add(temp);
                backtracking(s, i + 1, output, path);
                path.remove(path.size() - 1);
            }
        }
        
    }
    
    public boolean isPalindrome(String s){
        int i = 0;
        int j = s.length() - 1;
        while (i < j) {
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i += 1;
            j -= 1;
        }
        return true;
    }
}
