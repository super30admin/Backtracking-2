
//Time : n*2^n : n is for checking palindrome for each substring, and we are making 2 choices at every place
//space : O(n) : in worst case recursion stack will have string length of backtrack function call.
class Solution {
   
    public List<List<String>> partition(String s) {
         List<List<String>> result=new ArrayList<List<String>>();
        if(s.length()==0 || s==null ) return result;
       backtrack(s, new ArrayList<>(), 0,result); 
        return result;
    }
    
    void backtrack(String s, List<String> list, int start,List<List<String>> result)
    {
        //base
        // if end of stirng lenght
        //     add in to result
        //     terminate
        
        if(start==s.length())
        {
            result.add(new ArrayList<>(list));
            return;
        }
        
        //logic
        for(int i=start;i<s.length();i++)
        {
            //The steps i would follow here :
            //get substring upto ith character
            //check if it is palindrome
            //add that char into list
            //do dfs further by i+1
            //remove last elem from list-backtrack
            
            //end index is exclusive so take i+1
            String substring=s.substring(start,i+1);
            if(checkPalindrome(substring))
            {
                //String substring=s.substring(start,i+1);
                list.add(substring);
            
            backtrack(s,list,i+1,result);
            list.remove(list.size()-1);
            }
        }
    }
    
    //O(n) complexity here
    boolean checkPalindrome(String s)
    {
        int i=0;
        int j=s.length()-1;
        while(i<j)
        {
           if(s.charAt(i)!=s.charAt(j))
            return false;
              
        i++;
        j--;
        }
     return true;
    }
}
