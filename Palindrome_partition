//timecomplexity    (N+N)2^n
//spacecomplexity   (N+N)2^n

class Solution {
    List<List<String>> result;
    public List<List<String>> partition(String s) {

        result = new ArrayList<>();

        helper(s,0,new ArrayList<>());
        return result;
        
    }

    private void helper(String  s, int pivot, List<String> path){

        if(pivot == s.length()){
            result.add(new ArrayList<>(path));
            return;

        }
        for(int i = pivot; i < s.length(); i++){

            //action
            String sub = s.substring(pivot,i+1);
            if(isPalin(sub)){
                path.add(sub);
                 //recurse
            helper(s,i+1,path);

            //backtrack
            path.remove(path.size()-1);
            }          
        }
    }

    private boolean isPalin(String s){
        int start = 0;
        int end = s.length()-1;

        while(start <= end){
            if(s.charAt(start) != s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
