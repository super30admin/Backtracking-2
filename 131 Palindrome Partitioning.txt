//131. Palindrome Partitioning



//TC: 2 ^ n * n (since at each char we have 2 choices and palindrome function will take N)
//SC: n (for additional list)

class Solution {
     List<List<String>>result=new ArrayList<>();
    public List<List<String>> partition(String s) {
        helper(s,0,new ArrayList<>());
        return result;
    }
    private void helper(String s,int pivot,List<String>path){
        //base
        if(pivot==s.length()){
            result.add(new ArrayList<>(path));
            return;
        }
        //logic
        for(int i=pivot;i<s.length();i++){
            String sub=s.substring(pivot,i+1);
            if(isPalindrome(sub)){
                //action
                path.add(sub);
                //recurse
                helper(s,i+1,path);
                //backtrack
                path.remove(path.size()-1);
            }
        }

    }
    private boolean isPalindrome(String s){
        int start=0;
        int end=s.length()-1;
        while(start<end){
            if(s.charAt(start)!=s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}