class Solution {
    //131. Palindrome Partitioning
    
    List<List<String>> result = new ArrayList<>();
    public List<List<String>> partition(String s) {
        
        if(s.length() == 0)
            return result;
        helper(s,0,new ArrayList<>());
        return result;
        
        
    }
    private void helper(String s , int index, List<String>path){
        
        //base
        if(index == s.length()){
             result.add(new ArrayList<>(path));
             return;
        }
           
        
        for(int i =index; i<s.length(); i++){
            if(isPalin(s,index,i)){
                path.add(s.substring(index,i+1));
                helper(s,i+1,path);
                path.remove(path.size()-1);
            }
        }
    }
    
    private boolean isPalin(String s,int start,int end){
        while(start<end){
            if(s.charAt(start++)!=s.charAt(end--))
                return false;
        }
            return true;
        }
    }
