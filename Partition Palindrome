class Solution {
    List<List<String>> result;
    public List<List<String>> partition(String s) {
        result= new ArrayList<>();
      if(s==null || s.length()==0){
        return  result;
      }  
        helper(s,0,new ArrayList<>());
        return result;
    }
    public void helper(String s, int index, List<String> path){
        if(index==s.length())
        {
            result.add(new ArrayList<>(path));
            return;
        }
        for(int i=index;i<s.length();i++){
            if(isPalindrome(s, index,i)){
                path.add(s.substring( index, i+1));
                helper(s,i+1,path);
                path.remove(path.size()-1); 
            }
        }
       
    }
    
    public boolean isPalindrome(String s, int i,int j){
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)){
                return false;
            }
            i++;j--;
        }
        return true;
        
    }
}


//Time Complexity: exponetial
//Space complexity: O(n)
//Backtracking new same list, remove element after choosing it, keep updating the same list as we recurse throught the tree
